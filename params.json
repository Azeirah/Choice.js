{"name":"choice.js","tagline":"Better random library for javascript","body":"jsRandom\r\n========\r\n\r\nBetter random library for javascript\r\n\r\nThis is a random for javascript library heavily inspired by the Python random module.\r\nNote that the functions might behave a little different from the Python random library functions, and not all of them are included.\r\n\r\nfunctions\r\n---------\r\n\r\nWe have for you:\r\na **randint** function, takes start and stop.\r\n\r\nreturns an integer equal to or bigger than start, but smaller than stop\r\n```\r\nrandint(0, 1500) -> ex outputs: 0, 152, 839, 1499\r\n```\r\n\r\n**choice** function, takes an array\r\nthis one returns a random element from a given array\r\n```choice([1, 2, 3, 4, 5])\r\nexample outputs:\r\n1\r\n5\r\n4```\r\n\r\n**shuffle** function, takes an array\r\n\r\nthis one is a cool one, it returns an array with the elements shuffled around\r\n```\r\nshuffle([1, 2, 3, 4, 5]) -> ex output: [1, 3, 4, 5, 2]\r\n```\r\n\r\n**rand** function\r\nreturns a number between 0.0 and 1.0, this is the exact same as calling Math.random\r\n\r\n**sample** function, takes an array and a number of elements, returns an array of randomly chosen elements from the original array.\r\n```\r\nsample([1, 2, 3, 4, 5, 6, 7, 8], 3)\r\nexample outputs:\r\n[8, 5, 1]\r\n[1, 6, 2]\r\nsample([1, 1, 2, 2], 2)\r\nexample outputs:\r\n[1, 1]\r\n[1, 2]\r\n[2, 1]\r\n[2, 2]\r\n```\r\n\r\n**gaussian** function, takes a mean and a standard deviation. Returns a guassian random number.\r\n```\r\nguassian(10, 2)\r\nexample outputs: (note that with guassian random numbers numbers closer to the mean appear far more often)\r\n9\r\n9\r\n7\r\n12\r\n13\r\n4\r\n```\r\n\r\n**chance** function, takes a percentage. Returns true or false based on that percentage.\r\nTakes a second optional argument, an array of two items.\r\nIf the chance is true, it returns the first item out of the array. Otherwise it will return the second.\r\n```\r\nchance(25); // has a 25% chance to return true\r\nchance(70); // has a 70% chance to return true\r\nchance(12, [1, 2]); // has a 12% chance to return 1 and an 88% chance to return 2\r\n```\r\n\r\n**probabilities** function, takes two arrays of equal length. The first one is a set of probabilities adding up to 100%. The second one is a list of items. Each probability corresponds to an item. Example `Random.probabilities([2, 98], [\"first item\", \"second item\"])` has a 2% chance to return `\"first item\"` and a far higher, 98% to return `\"second item\"`\r\n```\r\nprobabilities([25, 25, 25, 25], [\"green\", \"blue\", \"yellow\", \"white\"]); // note that this is the same as using choice()\r\n\r\n// this one has 15% chance to return \"I get 500 experience points\"\r\n// another 15% chance to return \"I get 200 experience points\"\r\n// and a far higher 70% to return \"I get 50 experience points\"\r\nprobabilities([15, 15, 70], [\"I get 500 experience points\", \"I get 200 experience points\", \"I get 50 experience points\"]);\r\nprobabilities([1, 2, 3], [1]) // fails, the arrays are not equal size and probabilites do not add up to 100\r\n\r\n// note that you can also return functions, this is very powerful\r\nprobabilities([80, 20], [function () {\r\n    console.log(\"I appear about 80% of the time! :)\");\r\n}, function () {\r\n    console.log(\"I appear about 20% of the time! :(\");\r\n}])();\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}